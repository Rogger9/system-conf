{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    // "scope": "javascript,typescript",
    "prefix": "cl",
    "body": ["console.log($0)"],
    "description": "Log output to console"
  },
  "React component": {
    "prefix": "rc",
    "body": [
      "const $TM_FILENAME_BASE = () => {",
      "  return (",
      "    $0",
      "  )",
      "}",
      "",
      "export default $TM_FILENAME_BASE"
    ]
  },
  "React component (name folder)": {
    "prefix": "frc",
    "body": [
      "const ${TM_DIRECTORY/^.+\\/(.*)$/$1/} = () => {",
      "  return (",
      "    $0",
      "  )",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/}"
    ]
  },
  "React component to render": {
    "prefix": "rcr",
    "body": [
      "const $TM_FILENAME_BASE = () => (",
      "  $0",
      ")",
      "",
      "export default $TM_FILENAME_BASE"
    ],
    "description": "Component without logic"
  },
  "Function react component": {
    "prefix": "edf",
    "body": ["export default function $TM_FILENAME_BASE () {", "  return (", "    $0", "  )", "}"]
  },
  "Function react component (name folder)": {
    "prefix": "edff",
    "body": [
      "export default function ${TM_DIRECTORY/^.+\\/(.*)$/$1/} () {",
      "  return (",
      "    $0",
      "  )",
      "}"
    ]
  },
  "useState": {
    "prefix": "ss",
    "body": ["const [$1, set$3-$1] = useState$0($2)"]
  },
  "useEffect": {
    "prefix": "ff",
    "body": ["useEffect$1(() => {", "  $0", "}, [])"]
  }
}
